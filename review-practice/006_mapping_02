
# ** EXAM OBJECTIVE: MAPPINGS AND TEXT ANALYSIS **
# GOAL: Model relational data
# REQUIRED SETUP:
#    (i)   a running Elasticsearch cluster with at least one node 
#          and a Kibana instance,
#    (ii)  the cluster has no index with name `hamlet`, 
#    (iii) the cluster has no template that applies to indices 
#          starting by `hamlet


DELETE hamlet_*
DELETE _template/hamlet_*

# Create the index `hamlet_1` with one primary shard and no replicas
# Add some documents to `hamlet_1` by running the following command PUT hamlet_1/_doc/_bulk
{"index":{"_index":"hamlet_1","_id":"C0"}}
{"name":"HAMLET","relationship":[{"name":"HORATIO","type":"friend"},{"name":"GERTRUDE","type":"mother"}]}
{"index":{"_index":"hamlet_1","_id":"C1"}}
{"name":"KING CLAUDIUS","relationship":[{"name":"HAMLET","type":"nephew"}]}

PUT hamlet_1
{
  "settings": {
    "number_of_replicas": 0,
    "number_of_shards": 1
  }
}

PUT hamlet_1/_doc/_bulk
{"index":{"_index":"hamlet_1","_id":"C0"}}
{"name":"HAMLET","relationship":[{"name":"HORATIO","type":"friend"},{"name":"GERTRUDE","type":"mother"}]}
{"index":{"_index":"hamlet_1","_id":"C1"}}
{"name":"KING CLAUDIUS","relationship":[{"name":"HAMLET","type":"nephew"}]}

# Verify that the items of the `relationship` array cannot be 
#    searched independently - e.g., searching for a friend named 
#    Gertrude will return 1 hit

GET hamlet_1/_search
{
  "query": {
    "bool": {
      "must": [
        { "match": { "relationship.name": "gertrude" } },
        { "match": { "relationship.type": "friend" } }
      ]
}}}


# Create the index `hamlet_2` with one primary shard and no replicas
# Define a mapping for the default type "_doc" of `hamlet_2`, so 
#    that the inner objects of the `relationship` field (i) can be 
#    searched independently, (ii) have only unanalyzed fields# Reindex `hamlet_1` to `hamlet_2`# Verify that the items of the `relationship` array can now be 
#    searched independently - e.g., searching for a friend named 
#    Gertrude will return no hits

DELETE hamlet_2
PUT hamlet_2
{
  "settings": {
    "number_of_replicas": 0,
    "number_of_shards": 1
  },
  "mappings": {
    "properties": {
    "relationship": {
      "type": "nested"
    }
  }
  }
}

GET hamlet_2/_search 
{
  "query": {
    "nested": {
      "path": "relationship",
      "query": {
        "bool": {
          "must": [
            { "match": { "relationship.name": "gertrude" }},
            { "match": { "relationship.type":  "friend" }} 
          ]
}}}}}

# Add more documents to `hamlet_2` by running the following command
POST _bulk
{"index":{"_index":"hamlet_2", "_id":"LO"}}
{"line_number":"1.4.1","speaker":"HAMLET","text_entry":"The air bites shrewdly; it is very cold."}
{"index":{"_index":"hamlet_2","_id":"L1"}}
{"line_number":"1.4.2","speaker":"HORATIO","text_entry":"It is a nipping and an eager air."}
{"index":{"_index":"hamlet_2","_id":"L2"}}
{"line_number":"1.4.3","speaker":"HAMLET","text_entry":"What hour now?"}


# Create the index `hamlet_3` with only one primary shard and no 
#    replicas
# Copy the mapping of `hamlet_2` into `hamlet_3`, but also add a 
#    join field to define a relation between a `character` (the 
#    parent) and a `line` (the child). The name of such field is
#    "character_or_line" 
# Reindex `hamlet_2` to `hamlet_3`

DELETE hamlet_3
PUT hamlet_3
{
  "settings": {
    "number_of_replicas": 0,
    "number_of_shards": 1
  },
  "mappings": {
    "properties": {
    "character_or_line": { 
        "type": "join",
        "relations": {
          "character": "line" 
        }
      }
  }
  }
}

POST _reindex
{
  "source": {
    "index": "hamlet_2"
  },
  "dest": {
    "index": "hamlet_3"
  }
}


# Create a script named `init_lines` and save it into the cluster 
#    state. The script 
#    (i)   has a parameter named `characterId`,  
#    (ii)  adds the field `character_or_line` to the document,  
#    (iii) sets the value of `character_or_line.name` to "line" ,  
#    (iv)  sets the value of `character_or_line.parent` to the value 
#          of the `characterId` parameter
# Update the document 
# with id `C0` (i.e., the character document of 
#    Hamlet) by adding the field `character_or_line` and setting its 
#    `character_or_line.name` value to "character" 
# Update the documents in `hamlet_3` that have "HAMLET" as a 
#    `speaker`, by running the `init_lines` script with 
#    `characterId` set to "C0"

POST hamlet_3/_search

PUT hamlet_3/_doc/c1?refresh
{
  "text":"King Claudius",
  "character_or_line": "character" 
}


PUT hamlet_3/_doc/3?routing=c1&refresh
{
  "line_number": "1.2.1",
  "speaker": "KING CLAUDIUS",
  "text_entry": "Though yet of Hamlet our dear brothers death",
  "character_or_line": {
    "name": "line",
    "parent": "c1"
  }
}

PUT _ingest/pipeline/update-character
{
    "processors": [
      {
        "script": {
          "source": """
            ctx.line_number = '1.3.27';
            ctx.character_or_line.name = 'line';
            ctx.character_or_line.parent = 'c1';
          """
        }
      }
    ]
}

POST hamlet_3/_update_by_query?routing=c1&pipeline=update-character
{
  "query":{
    "term":{
      "_id":"3"
    }
  }
}

GET hamlet_3/_search


---method 2 --------
POST hamlet_3/_update_by_query
{
  "query": {
    "term": {
      "_id": 3
    }
  },
  "script": {
    "source": "ctx._source['line_number'] = '1.3.29'; ctx._source['character_or_line']['name'] = 'line'; ctx._source['character_or_line']['parent'] = 'c1'"
  }
}

合入：https://github.com/mingyitianxia/elastic-certified-engineer/issues/5 bug
更新父子文档需要调整routing，但是普通的script不可以更新文档的routing，所以必须在reindex的时候script指定routing，

或者在update_by_query的时候使用pipeline的script更新文档的routing

PUT _scripts/init_lines
{
  "script": {
    "lang": "painless",
    "source": """
              HashMap map = new HashMap();
              map.name = 'line';
              map.parent = params.characterId;
              ctx._source.character_or_line = map;
              """
  }
}
PUT _ingest/pipeline/set_routing
{
  "processors": [
    {
      "script": {
        "source": """
              ctx._routing = 'C0';
              """
      }
    }
  ]
}
POST hamlet_3/_update_by_query?pipeline=set_routing
{
  "script": {
    "id": "init_lines",
    "params": {
      "characterId": "C0"
    }
  },
  "query": {
    "match": {
      "speaker": "HAMLET"
    }
  }
}
